source('~/Documents/statistics_r/applied_stat/ch3_data_progr.R', echo=TRUE)
1:20
seq(20,1) #b
c(seq(1,20),seq(20,1)) #c
tmp <- c(4,6,3)
tmp
rep(tmp,10)
c(rep(tmp,10))
rep(tmp,c(11,10,6))
x <- seq(3,6,0.1)
x
exp(x)*cos(x)
x <- seq(3,36,3)
x
y <- seq(1,34,3)
y
(0.1^x)*(0.2^y)
x <- 1:25
2^x/x
(2^x)/x
i <- 10:100
i^3 + 4*i^2
i <- 1:25
(2^i/i) * (3^i/i^2)
paste(1:12)
paste(1:12, sep=" ")
paste(1:12, sep=",")
paste0(1:12)
as.character(1:12)
nth <- paste0(1:12, c("st", "nd", "rd", rep("th", 9)))
nth
nth <- paste(1:12, c("st", "nd", "rd", rep("th", 9)))
nth
class(nth)
type(nth)
1:6
c(1,3,6)
paste("label", 1:30)
paste0("label", 1:30)
paste("label", 1:30)
paste0("fn", 1:30)
x <- 1:12
x
sample(x)
sample(x, replace=TRUE)
sample(x, size=3)
sample.int(1e10, 12, replace=TRUE)
sample.int(5, 12, replace=TRUE)
.Random.seed
set.seed(50)
xVec <- sample(0:999, 250, replace=T)
yVec <- sample(0:999, 250, replace=T)
head(xVec)
x_a <- xVec[i]-yVec[j]
sample(x_a, 10, replace=F)
x_b <- sin(yVec[j]/xVec[i])
sample(x_b, 20, replace=F)
x_c <- xVec[k] + 2*xVec[k+1] - xVec[k+2]
x_c <- xVec[k] + 2*xVec[(k+1)] - xVec[(k+2)]
k <- 1:248
x_c <- xVec[k] + 2*xVec[(k+1)] - xVec[(k+2)]
sample(x_c, 10, replace=F)
k <- 1:248
x_c <- xVec[k] + 2*xVec[(k+1)] - xVec[(k+2)]
sample(x_c, 10, replace=F)
x_c <- xVec[k] + 2*xVec[k+1] - xVec[k+2]
sample(x_c, 10, replace=F)
n <- 250
i <- 2:n
j <- 1:(n-1)
x_a <- xVec[i]-yVec[j]
sample(x_a, 10, replace=F)
x_b <- sin(yVec[j]/xVec[i])
sample(x_b, 20, replace=F)
k <- 1:248
x_c <- xVec[k] + 2*xVec[k+1] - xVec[k+2]
sample(x_c, 10, replace=F)
l <- 1:(n-1)
exp(-xVec[l+1])/(xVec[l]+10)
length(x)
x <- c(1, 3, 5, 7, 8, 9)
y <- 1:100
seq(from=1.5, to=4.2, by=0.1)
rep("a", times = 3)
a <- c(x, rep(seq(1, 9, 2), 3), c(1, 2, 3), 42, 2:4)
length(x)
X
x
x^2
x != 3
log(x)
options$digits
options.digits
options()
options(digits = 6)
log(x)
getwd()
setwd("/Users/haroldsimeon/Documents/statistics_r/intro_to_r")
setwd("/Users/haroldsimeon/Documents/statistics_r/applied_stat")
x
rep(x, 10) + y
rm(list=ls())
source('~/Documents/statistics_r/applied_stat/ch3_data_progr.R', echo=TRUE)
x[x > 3]
x[> 3]
x[x > 3]
x[x != 2]
sum(x > 3)
x > 3
as.numeric(x > 2)
count(x > 3)
which(x)
which(x != 3)
x[which(x != 3)]
x
which(x == max(x))
x[which(x == max(x))]
which.max(x)
any(x > 0)
x <- 1:9
x
mat_x
mat_x <- matrix(x, nrow=3, ncol=3)
mat_x
mat_y <- matrix(x, nrow = 3, ncol = 3, byrow = TRUE)
mat_y
mat_z <- matrix(0, 2, 4)
mat_z
mat_x[1, 2]
mat_x[1, ]
mat_x[2, c(1, 3)]
mat_x
x <- 1:9
rev(x)
mat_z <- rbind(x, rev(x), rep(1, 9))
mat_z
cbind(col_1 = x, col_2 = rev(x), col_3 = rep(1, 9))
x <- 1:9
y <- 9:1
X <- matrix(x, 3, 3)
Y <- matrix(y, 3, 3)
X
Y
X + Y
x <- 1:20
y <- 9:20
X <- matrix(x, 4, 5)
Y <- matrix(y, 4, 5)
y <- 20:1
Y <- matrix(y, 4, 5)
X
Y
X + Y
x <- 1:9
y <- 9:1
X <- matrix(x, 3, 3)
Y <- matrix(y, 3, 3)
X
Y
X + Y
X - Y
X
Y
X * Y
X / Y
Y / X
X %*% Y
X
Y
sum(X[1,]*Y[,1])
X %/% Y
sum(X[1,]/Y[,1])
X / Y
t(X)
X
Z <- matrix(c(9, 2, -3, 2, 4, -2, -3, -2, 16), 3, byrow=TRUE)
Z
solve(Z)
solve(Z) %*% Z
diag(3)
diag(4)
all.equal(mat_x + mat_y)
source('~/Documents/statistics_r/applied_stat/ch3_matrixes.R', echo=TRUE)
all.equal(mat_x + mat_y)
all.equal(mat_x, mat_x)
all.equal(mat_x, mat_y)
all.equal(solve(Z) %*% Z, diag(3))
diag(Z)
Z
diag(-Z)
diag(rev(Z)
#Compare objects
all.equal(mat_x, mat_y)
all.equal(solve(Z) %*% Z, diag(3))
diag(rev(Z))
rev(diag(Z))
diag(Z)
diag(1:5)
a_vec <- c(1,2,3)
b_vec <- c(2,2,2)
c(is.vector(a_vec), is.vector(b_vec))
c(is.matrix(a_vec), is.vector(b_vec))
c(is.matrix(a_vec), is.matrix(b_vec))
a_vec * b_vec
a_vec %*% b_vec
a_vec %o% b_vec
as.matrix(a_vec)
a_vec
as.matrix(a_vec) %*% b_vec
crossprod(a_vec, b_vec)
list(42, "Hello", TRUE)
ex_list <- list(
a <- c(1,2,3,4),
b <- TRUE,
C <- "Hello!",
d <- function(arg = 42){print("Hello World!")},
e <- diag(5)
)
ex_list
ex_list[1]
ex_list[1][2]
ex_list[[1]][2]
ex_list[[1]]
ex_list$e
ex_list
ex_list[1]
ex_list[[1]]
ex_list$c
ex_list[c]
ex_list
ex_list[3]
ex_list$'a'
ex_list$a
str(ex_list)
source('~/Documents/statistics_r/applied_stat/ch3_list.R', echo=TRUE)
ex_list$a
ex_list$e
ex_list[c("e", "a")]
example_data <- data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbuye"),
z = rep(TRUE, FALSE)
)
example_data <- data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbuye"),
z = rep(c(TRUE, FALSE), 5)
)
exmaple_data
example_data <- data.frame(x = c(1, 3, 5, 7, 9, 1, 3, 5, 7, 9),
y = c(rep("Hello", 9), "Goodbuye"),
z = rep(c(TRUE, FALSE), 5)
)
exmaple_data
example_data
matrix(0, nrow=3, ncol=3)
mat_a <- matrix(c(1,5,-2,1,2,-1,3,6,-3), nrow=3, ncol=3)
mat_a
mat_0 <- matrix(0, nrow=3, ncol=3)
mat_0
all.equal(mat_a^3, mat_0)
mat_a^3
mat_a*mat_a*mat_a
example_data
all.equal(length(example_data$x),
length(example_data$y),
length(example_data$z))
str(example_data)
nrow(example_data)
ncol(example_data)
dim(example_data)
library(readr)
example_data_from_csv <- read_csv("data/example-data.csv")
library(readr)
example_data_from_csv <- read_csv("data/example-data.csv")
library(readr)
example_data_from_csv <- read_csv("data/example-data.csv")
example_data_from_csv
library(tibble)
example_data
example_data <- as_tibble(example_data)
example_data
head(mpg, n=10)
mpg
str(mpg)
?mpg
mpg$year
str(mpg)
mpg$hwy
dim(mpg)
str(mpg)
mpg[1,]
mpg[1, c("manufacturer", "model", "year")]
mpg[mpg$hwy > 35, c("manufacturer", "model", "year")]
select(mpg, subset=mpg$hwy > 35, select=c("manufacturer", "model", "year"))
subset(mpg, subset=mpg$hwy > 35, select=c("manufacturer", "model", "year"))
test1 <- mpg[mpg$hwy > 35, c("manufacturer", "model", "year")]
test2 <- subset(mpg, subset=mpg$hwy > 35, select=c("manufacturer", "model", "year"))
all.equal(test1, test2)
library(dplyr)
mpg %>% filter(hwy > 35) %>% select(manufacturer, model, year)
x <- runif(n=1, min=0, max=10)
x
x <- runif(1, 0, 10)
x
if(x < 0) {
print("This number is negative.")
print(x)
} else if(x = 3) {
print("This number is equal to 3")
print(x)
} else {
print("This number is more than 3")
print(x)
}
x <- runif(1, 0, 10)
x
if(x < 0) {
print("This number is negative.")
print(x)
} else if(x = 3) {
print("This number is equal to 3")
print(x)
} else {
print("This number is more than 3")
print(x)
}
if(x < 0) {
#print("This number is negative.")
print(x)
} else if(x = 3) {
#print("This number is equal to 3")
print(x)
} else {
#print("This number is more than 3")
print(x)
}
if(x < 0) {
#print("This number is negative.")
print(x)
} else if(x = 3) {
#print("This number is equal to 3")
print(x)
}
if(x < 0) {
#print("This number is negative.")
print(x)
}
print("This number is positive")
print(x)
runif(1, 0, 10)
x <- 1
y <- 3
if(x > y) {
z <- x * y
print("x is larger than y")
} else {
z <- x + 5 * y
print("x is less than or equal to y")
}
z
print(i)
for(i in 1:10) {
print(i)
}
for(i in 1:4) {
print(x[i])
}
x <- c("a", "b", "c", "d")
for(i in 1:4) {
# Print out each element
print(x[i])
}
seq_along(0,1)
seq_along(5)
seq_len(5)
x <- matrix(1:6, nrow=2, ncol=3)
x
for(i in seq_len(nrow(x))) {
for(j in seq_len(ncol(x))) {
print(x[i, j])
}
count <- 0
while(count < 10) {
print(count)
count <- count + 1
}
z <- 5
set.seed(1)
while(z >= 3 && z <= 10) {
coin <- rbinom(1, 1, 0.5)
if(coin == 1) {
z <- z + 1
} else {
z <- z - 1
}
print(z)
for(i in 1:20) {
paste(z, " ")
}
for(i in 1:20) {
print(z)
}
for(i in 1:20) {
cat(paste(z, " "))
}
for(i in 1:20) {
paste(z, " ")
}
for(i in 1:20) {
cat(paste(z, " "))
}
for(i in 1:100) {
cat(paste(z, " "))
}
for(i in 1:100) {
cat(paste(z, " "))
}
fib <- c(1, 1, 2, 3, 5, 8, 13, 21)
ifelse(fib > 6, "Foo", "Bar")
standardize <- function(x) {
m = mean(x)
std = sd(x)
result = (x - m)/std
result
}
test_sample <- rnorm(n = 10, mean = 2, sd = 5)
test_sample
standardize(x = test_sample)
power_of_num <- function(num, ) {
num^power
}
power_of_num <- function(num, power = 2) {
num^power
}
power_of_num(10)
power_of_num(10,4)
2*TRUE
2*F
get_var <- function(x, biased=FALSE) {
n = length(x) - 1 * !biased
(1 / n) * sum((x - mean(x))^2)
}
test_sample
get_var(test_sample)
get_var(test_sample, biased = T)
g <- function(num) {
for(i in sea_len(num)) {
cat("Hello, world!\n")
}
g(8)
g <- function(num) {
for(i in seq_len(num)) {
cat("Hello, world!\n")
}
g(8)
g()
str(precip)
head(precip)
precip
names(precip)
str(precip)
str(rivers)
rivers
?datasets
library(help = datasets)
str(discoveries) #time-series data (discrete)
head(discoveries)
discoveries
str(discoveries)
names(discoveries)
head(ozone[, c(6:7, 10)])
stripchart(precip, xlab="rainfall")
stripchart(precip, xlab="rainfall", ylab="data")
stripchart(precip, xlab="rainfall")
Â¬l
\\\\
precip
stripchart(precip, method = "jitter", xlab="length")
stripchart(precip, method="stack", xlab="number")
discoveries
rivers
stripchart(rivers, method = "jitter", xlab="length")
stripchart(discoveries, method="stack", xlab="number")
new_discoveries <- c(discoveries, -300, -100, -200)
new_discoveries
new_discoveries <- discoveries
new_discoveries
discoveries
new_discoveries <- c(discoveries, -6, -5, -4, -3, -2, -1)
stripchart(new_discoveries, method="stack", xlab="number")
hist(precip, main="")
hist(rivers, method="")
hist(precip, main="")
hist(precip, freq=FALSE, main="")
precip
hist(precip, breaks = 200, main="")
hist(precip, breaks = 100, main="")
hist(precip, breaks = 50, main="")
hist(precip, breaks = 10, main="")
city
cty
mpg
mean(mpg$cty)
options
options()
option$digits = 8
options$digits = 8
options$digits <- 8
options(digits=8)
range(mpg$cty)
table(mpg$drv)
mpg$drv
summary(mpg$drv)
